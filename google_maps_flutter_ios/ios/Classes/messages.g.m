// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v20.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FGMPlatformTileLayer ()
+ (FGMPlatformTileLayer *)fromList:(NSArray<id> *)list;
+ (nullable FGMPlatformTileLayer *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FGMPlatformZoomRange ()
+ (FGMPlatformZoomRange *)fromList:(NSArray<id> *)list;
+ (nullable FGMPlatformZoomRange *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation FGMPlatformTileLayer
+ (instancetype)makeWithVisible:(BOOL)visible
                         fadeIn:(BOOL)fadeIn
                        opacity:(double)opacity
                         zIndex:(NSInteger)zIndex {
  FGMPlatformTileLayer *pigeonResult = [[FGMPlatformTileLayer alloc] init];
  pigeonResult.visible = visible;
  pigeonResult.fadeIn = fadeIn;
  pigeonResult.opacity = opacity;
  pigeonResult.zIndex = zIndex;
  return pigeonResult;
}
+ (FGMPlatformTileLayer *)fromList:(NSArray<id> *)list {
  FGMPlatformTileLayer *pigeonResult = [[FGMPlatformTileLayer alloc] init];
  pigeonResult.visible = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.fadeIn = [GetNullableObjectAtIndex(list, 1) boolValue];
  pigeonResult.opacity = [GetNullableObjectAtIndex(list, 2) doubleValue];
  pigeonResult.zIndex = [GetNullableObjectAtIndex(list, 3) integerValue];
  return pigeonResult;
}
+ (nullable FGMPlatformTileLayer *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FGMPlatformTileLayer fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.visible),
    @(self.fadeIn),
    @(self.opacity),
    @(self.zIndex),
  ];
}
@end

@implementation FGMPlatformZoomRange
+ (instancetype)makeWithMin:(double)min max:(double)max {
  FGMPlatformZoomRange *pigeonResult = [[FGMPlatformZoomRange alloc] init];
  pigeonResult.min = min;
  pigeonResult.max = max;
  return pigeonResult;
}
+ (FGMPlatformZoomRange *)fromList:(NSArray<id> *)list {
  FGMPlatformZoomRange *pigeonResult = [[FGMPlatformZoomRange alloc] init];
  pigeonResult.min = [GetNullableObjectAtIndex(list, 0) doubleValue];
  pigeonResult.max = [GetNullableObjectAtIndex(list, 1) doubleValue];
  return pigeonResult;
}
+ (nullable FGMPlatformZoomRange *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FGMPlatformZoomRange fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.min),
    @(self.max),
  ];
}
@end

@interface FGMMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation FGMMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129:
      return [FGMPlatformTileLayer fromList:[self readValue]];
    case 130:
      return [FGMPlatformZoomRange fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FGMMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation FGMMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FGMPlatformTileLayer class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FGMPlatformZoomRange class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FGMMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FGMMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FGMMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FGMMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FGMGetMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FGMMessagesPigeonCodecReaderWriter *readerWriter =
        [[FGMMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpFGMMapsInspectorApi(id<FlutterBinaryMessenger> binaryMessenger,
                              NSObject<FGMMapsInspectorApi> *api) {
  SetUpFGMMapsInspectorApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFGMMapsInspectorApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                        NSObject<FGMMapsInspectorApi> *api,
                                        NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_maps_flutter_ios."
                                                   @"MapsInspectorApi.areBuildingsEnabled",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FGMGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(areBuildingsEnabledWithError:)],
                @"FGMMapsInspectorApi api (%@) doesn't respond to "
                @"@selector(areBuildingsEnabledWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api areBuildingsEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_maps_flutter_ios."
                                                   @"MapsInspectorApi.areRotateGesturesEnabled",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FGMGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(areRotateGesturesEnabledWithError:)],
                @"FGMMapsInspectorApi api (%@) doesn't respond to "
                @"@selector(areRotateGesturesEnabledWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api areRotateGesturesEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_maps_flutter_ios."
                                                   @"MapsInspectorApi.areScrollGesturesEnabled",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FGMGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(areScrollGesturesEnabledWithError:)],
                @"FGMMapsInspectorApi api (%@) doesn't respond to "
                @"@selector(areScrollGesturesEnabledWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api areScrollGesturesEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_maps_flutter_ios."
                                                   @"MapsInspectorApi.areTiltGesturesEnabled",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FGMGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(areTiltGesturesEnabledWithError:)],
                @"FGMMapsInspectorApi api (%@) doesn't respond to "
                @"@selector(areTiltGesturesEnabledWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api areTiltGesturesEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_maps_flutter_ios."
                                                   @"MapsInspectorApi.areZoomGesturesEnabled",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FGMGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(areZoomGesturesEnabledWithError:)],
                @"FGMMapsInspectorApi api (%@) doesn't respond to "
                @"@selector(areZoomGesturesEnabledWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api areZoomGesturesEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_maps_flutter_ios."
                                                   @"MapsInspectorApi.isCompassEnabled",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FGMGetMessagesCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(isCompassEnabledWithError:)],
          @"FGMMapsInspectorApi api (%@) doesn't respond to @selector(isCompassEnabledWithError:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isCompassEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_maps_flutter_ios."
                                                   @"MapsInspectorApi.isMyLocationButtonEnabled",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FGMGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isMyLocationButtonEnabledWithError:)],
                @"FGMMapsInspectorApi api (%@) doesn't respond to "
                @"@selector(isMyLocationButtonEnabledWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isMyLocationButtonEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_maps_flutter_ios."
                                                   @"MapsInspectorApi.isTrafficEnabled",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FGMGetMessagesCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(isTrafficEnabledWithError:)],
          @"FGMMapsInspectorApi api (%@) doesn't respond to @selector(isTrafficEnabledWithError:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isTrafficEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_maps_flutter_ios."
                                                   @"MapsInspectorApi.getTileOverlayInfo",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FGMGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getInfoForTileOverlayWithIdentifier:error:)],
                @"FGMMapsInspectorApi api (%@) doesn't respond to "
                @"@selector(getInfoForTileOverlayWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_tileOverlayId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FGMPlatformTileLayer *output = [api getInfoForTileOverlayWithIdentifier:arg_tileOverlayId
                                                                          error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_maps_flutter_ios."
                                                   @"MapsInspectorApi.getZoomRange",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FGMGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(zoomRange:)],
                @"FGMMapsInspectorApi api (%@) doesn't respond to @selector(zoomRange:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FGMPlatformZoomRange *output = [api zoomRange:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
